generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  role              Role
  avatar            String?
  createdAt         DateTime           @default(now())
  notes             String?
  status            String             @default("pending")
  hours             Int?
  tribe             String?
  assignmentModules AssignmentModule[]
  classesTaught     Class[]            @relation("TeacherClasses")
  modulesCreated    Module[]           @relation("ModuleCreator")
  reports           Report[]
  enrollments       StudentClass[]
  userModules       UserModule[]
}

model Module {
  id                String             @id @default(uuid())
  title             String
  description       String
  createdAt         DateTime           @default(now())
  createdById       String
  url               String             @default("https://modulo.happytribe.ai")
  order             Int?
  assignmentModules AssignmentModule[]
  classes           Class[]
  createdBy         User               @relation("ModuleCreator", fields: [createdById], references: [id])
  userModules       UserModule[]
}

model Class {
  id          String         @id @default(uuid())
  title       String
  description String
  schedule    String
  maxStudents Int
  createdAt   DateTime       @default(now())
  teacherId   String
  moduleId    String
  assignments Assignment[]
  module      Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  teacher     User           @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)
  materials   Material[]
  enrollments StudentClass[]
}

model Assignment {
  id          String           @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  status      AssignmentStatus @default(pending)
  classId     String
  createdAt   DateTime         @default(now())
  class       Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model StudentClass {
  id        String           @id @default(uuid())
  studentId String
  classId   String
  status    EnrollmentStatus @default(active)
  joinedAt  DateTime         @default(now())
  class     Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
}

model Material {
  id        String   @id @default(uuid())
  title     String
  url       String
  classId   String
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Report {
  id        String   @id @default(uuid())
  userId    String
  type      String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserModule {
  id       String @id @default(uuid())
  userId   String
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
}

model AssignmentModule {
  id        String   @id @default(uuid())
  userId    String
  moduleId  String
  content   String
  createdAt DateTime @default(now())
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
}

enum Role {
  student
  teacher
  admin
}

enum AssignmentStatus {
  pending
  completed
  overdue
}

enum EnrollmentStatus {
  active
  pending
}
