// Modelo de base de datos para HappyTribe
// Sistema educativo para gestión de estudiantes, profesores y módulos

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role
  avatar    String?
  createdAt DateTime @default(now())

  status String  @default("pending") // Estado del usuario
  notes  String? // Notas internas

  hours             Int? // Horas del usuario (nuevo campo)
  classesTaught     Class[]            @relation("TeacherClasses")
  modulesCreated    Module[]           @relation("ModuleCreator")
  enrollments       StudentClass[]
  reports           Report[]
  userModules       UserModule[]
  assignmentModules AssignmentModule[]
}

enum Role {
  student
  teacher
  admin
}

model Module {
  id                String             @id @default(uuid())
  title             String
  description       String
  createdAt         DateTime           @default(now())
  createdById       String
  createdBy         User               @relation("ModuleCreator", fields: [createdById], references: [id], onDelete: Restrict)
  classes           Class[]
  url               String             @default("https://modulo.happytribe.ai")
  order             Int? // Campo para ordenamiento drag & drop
  userModules       UserModule[]
  assignmentModules AssignmentModule[]
}

model Class {
  id          String   @id @default(uuid())
  title       String
  description String
  schedule    String
  maxStudents Int
  createdAt   DateTime @default(now())

  teacherId String
  teacher   User   @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  assignments Assignment[]
  materials   Material[]
  enrollments StudentClass[]
}

model Assignment {
  id          String           @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  status      AssignmentStatus @default(pending)
  classId     String
  class       Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
}

enum AssignmentStatus {
  pending
  completed
  overdue
}

model StudentClass {
  id        String           @id @default(uuid())
  studentId String
  classId   String
  status    EnrollmentStatus @default(active)
  joinedAt  DateTime         @default(now())

  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
}

enum EnrollmentStatus {
  active
  pending
}

model Material {
  id        String   @id @default(uuid())
  title     String
  url       String
  classId   String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Report {
  id        String   @id @default(uuid())
  userId    String
  type      String
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserModule {
  id       String @id @default(uuid())
  userId   String
  moduleId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
}

model AssignmentModule {
  id        String   @id @default(uuid())
  userId    String
  moduleId  String
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
}
